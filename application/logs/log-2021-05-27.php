<?php defined('BASEPATH') OR exit('No direct script access allowed'); ?>

ERROR - 2021-05-27 08:22:15 --> Severity: Warning --> require(./vendor/autoload.php): failed to open stream: No such file or directory /home/ansenasa/public_html/polakain/application/controllers/Item.php 6
ERROR - 2021-05-27 08:22:15 --> Severity: Warning --> Cannot modify header information - headers already sent by (output started at /home/ansenasa/public_html/polakain/system/core/Exceptions.php:271) /home/ansenasa/public_html/polakain/system/core/Common.php 570
ERROR - 2021-05-27 08:22:15 --> Severity: Compile Error --> require(): Failed opening required './vendor/autoload.php' (include_path='.:/opt/cpanel/ea-php74/root/usr/share/pear') /home/ansenasa/public_html/polakain/application/controllers/Item.php 6
ERROR - 2021-05-27 08:24:50 --> Severity: Warning --> unlink(./assets/barcode/Zz.png): No such file or directory /home/ansenasa/public_html/polakain/application/controllers/Item.php 581
ERROR - 2021-05-27 08:29:57 --> Severity: Warning --> unlink(./assets/barcode/Aalpha-01-2021.png): No such file or directory /home/ansenasa/public_html/polakain/application/controllers/Item.php 581
ERROR - 2021-05-27 08:34:16 --> Severity: Warning --> unlink(./assets/barcode/Aalpha-01-2021.png): No such file or directory /home/ansenasa/public_html/polakain/application/controllers/Item.php 581
ERROR - 2021-05-27 09:40:56 --> Severity: Notice --> Trying to access array offset on value of type null /home/ansenasa/public_html/polakain/application/controllers/Sales.php 518
ERROR - 2021-05-27 09:41:08 --> Severity: Notice --> Trying to access array offset on value of type null /home/ansenasa/public_html/polakain/application/controllers/Sales.php 518
ERROR - 2021-05-27 09:44:34 --> Query error: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'BASEPATH')ORexit('Nodirectscriptaccessallowed');date_default_timezone_set('As...' at line 6 - Invalid query: SELECT id,
												name,
												code
												FROM item
												WHERE dept_id = 41
												AND code = '<?phpdefined('BASEPATH')ORexit('Nodirectscriptaccessallowed');date_default_timezone_set('Asia/Jakarta');/**ClassSales*Salesas'Penjualan'*/classSalesextendsCI_Controller{	private$closingDate;	function__construct(){		parent::__construct();		//Checksession		$this->session_lib->check_session();		$this->closingDate=lock_closing('Sales');	}	//Endoffunction__construct();	publicfunctionindex(){		//Permission		$this->session_lib->check_permission('p_sale_add');		if(!empty($this->session->userdata('template_id'))){		}else{			$this->session->set_userdata('template_id','0');		}		//Log		$attr=array(						'customer'			=>$this->db->query("SELECTid,																		name																		FROMcustomer																		WHEREdept_id=".$this->session->userdata('dept_id')."																		ORDERBYnameASC")->result(),						'payment_method'	=>$this->db->query("SELECTid,																		CONCAT(name,'-',bank_name)AS'method'																		FROMpayment_method																		WHEREdept_id=".$this->session->userdata('dept_id')."																		ANDstatus=1																		ORDERBYnameASC")->result(),						'closingDate'		=>$this->closingDate					);		$this->layout_lib->default_template('transaction/sales/index',$attr);			}	//Endoffunctionindex	functionedit($id){		//Permission		$this->session_lib->check_permission('p_sale_edit');		//Log		$attr=array(						'customer'			=>$this->db->query("SELECTid,																		name																		FROMcustomer																		WHEREdept_id=".$this->session->userdata('dept_id')."																		ORDERBYnameASC")->result(),						'payment_method'	=>$this->db->query("SELECTid,																		CONCAT(name,'-',bank_name)AS'method'																		FROMpayment_method																		WHEREdept_id=".$this->session->userdata('dept_id')."																		ANDstatus=1																		ORDERBYnameASC")->result(),						'sales'				=>$this->db->query("SELECTsale.id,																		customer_ref,																		customer_id,																		IF(customer_id!=0,customer.name,NULL)AS'customer_name',																		total_price,																		ppn,																		d_cost,																		total_price+ppn+d_costAS'grand_total',																		nominal_bayar,																		sale_status,																		payment_method_id,																		IF(payment_method_id='z','Tunai',IF(payment_method_id!=0,CONCAT(payment_method.name,'-',payment_method.bank_name),NULL))AS'payment_method_name'																		FROMsale																		LEFTJOINcustomerONcustomer.id=sale.customer_idANDcustomer_id!=0																		LEFTJOINpayment_methodONpayment_method.id=sale.payment_method_idANDsale.payment_method_id!=0																		WHEREsale.id=".$id)->row_array(),						'id'				=>$id					);		$this->layout_lib->default_template('transaction/sales/edit',$attr);	}	//Endoffunctionedit	publicfunctionprint($id){		$item=$this->db->query("SELECTitem.id,										name										FROMitem										WHEREdept_id=".$this->session->userdata('dept_id')."										ORDERBYnameASC")->result();		$template_item=$this->db->query("SELECTid,												CONCAT(brand,'',tipe)AS'template_name',												detail												FROMtemplate_item												WHEREdept_id=".$this->session->userdata('dept_id'))->result();		$attr=array(						'customer'			=>$this->db->query("SELECTid,																		name																		FROMcustomer																		WHEREdept_id=".$this->session->userdata('dept_id')."																		ORDERBYnameASC")->result(),						'payment_method'	=>$this->db->query("SELECTid,																		CONCAT(name,'-',bank_name)AS'method'																		FROMpayment_method																		WHEREdept_id=".$this->session->userdata('dept_id')."																		ANDstatus=1																		ORDERBYnameASC")->result(),						'sales'				=>$this->db->query("SELECTsale.id,																		customer_ref,																		customer_id,																		IF(customer_id!=0,customer.name,NULL)AS'customer_name',																		total_price,																		IF(ppnISNULL,0,ppn)AS'ppn',																		IF(d_costISNULL,0,d_cost)AS'd_cost',																		total_price+ppn+d_costAS'grand_total',																		nominal_bayar,																		sale_status,																		payment_method_id,																		IF(payment_method_id='z','Tunai',IF(payment_method_id!=0,CONCAT(payment_method.name,'-',payment_method.bank_name),NULL))AS'payment_method_name',																		receipt_number,																		detail,																		date_kirim,																		ansena_department.data_detail,																		ansena_department.fullname																		FROMsale																		JOINsale_detailONsale_detail.sale_id=sale.id																		LEFTJOINcustomerONcustomer.id=sale.customer_idANDcustomer_id!=0																		LEFTJOINpayment_methodONpayment_method.id=sale.payment_method_idANDsale.payment_method_id!=0																		LEFTJOINansena_departmentONansena_department.id=sale.dept_id																		WHEREsale.id=".$id)->row_array(),						'id'				=>$id,						'item'				=>$item,						'template_item'		=>$template_item					);		$this->load->view('transaction/sales/print',$attr);			}	//Endoffunctionprint	publicfunctionreport_data(){		//Permission		$this->session_lib->check_permission('p_sale_report');		//Log		$attr=array(						'filterStatus'=>$this->filter_status(),					);		$this->layout_lib->default_template('transaction/sales/report-data',$attr);			}	//Endoffunctionreport_data	publicfunctionfilter_status(){		$html='<selectclass="form-controlselect2"multiple><optionvalue=""disabled>CariStatus</option>';		$html.='<optionvalue="1">DP</option>';		$html.='<optionvalue="2">Lunas</option>';		$html.='<optionvalue="3">Piutang</option>';		$html.='</select>';		return$html;			}	//Endoffunctionfilter_status	##################################################################################################################################	#API#	##################################################################################################################################	/**	*@param$columnOrder	*@param$columnSearch	*@param$order	*/	publicfunctionserver_side_data(){		//Setfieldordercolumn		$columnOrder=array('','receipt_number','sale.created_time','total_price','sale_status');		//Setfieldsearchcolumn	$columnSearch=array(						array(),						array(							'format'	=>'string',							'field'	=>'receipt_number',							'type'		=>'search'						),						array(							'format'	=>'timestamp',							'field'	=>'sale.created_time',							'type'		=>'daterange'						),						array(							'format'	=>'string',							'field'	=>'total_price',							'type'		=>'search'						),						array(							'format'	=>'string',							'field'	=>'sale_status',							'type'		=>'select-multiple'						)					);		//Setfieldordering	$order=array('created_time'=>'desc');	$countTotal="SELECTid						FROMsale						WHEREdept_id=".$this->session->userdata('dept_id')."						ANDwarehouse_id=".$this->session->userdata('p_warehouse_id');	$countTotal=$this->db->query($countTotal)->num_rows();		$query="SELECTsale.created_time,						receipt_number,						total_price+ppn+d_costAS'grand_total',						sale_status,						sale.id,						date_lunas,						date_dp,						due_date,						date_kirim,						payment_method_id,						warehouse.nameASwarehouse_name						FROMsale						JOINwarehouseONwarehouse.id=sale.warehouse_idANDsale.warehouse_id=".$this->session->userdata('p_warehouse_id')."";		$query.=$this->server_side_lib->individual_column_filtering($columnSearch,'sale');		$query.=$this->server_side_lib->ordering($columnOrder,$order);		$sales=$query.$this->server_side_lib->limit();		$results=$this->db->query($sales)->result();		$data=array();		foreach($resultsas$rows):			$row=array();			if($this->session->userdata('p_sale_delete')==1){				$btnDelete='<ahref="javascript:void(0)"class="btnbtn-smbtn-outline-dangerm-1"onclick="delete_sales('.$rows->id.')"><iclass="fafa-trash"></i></a>';			}else{				$btnDelete='';			}			$btnView='<ahref="javascript:void(0)"class="btnbtn-smbtn-outline-infom-1"onclick="display_detail('.$rows->id.')"><iclass="fafa-eye"></i></a>';			if($rows->date_kirim==NULL){			$row[]=$btnView.$btnDelete;			}else{			$row[]=$btnView;			}			$row[]=$rows->receipt_number;			$row[]=date_format(date_create($rows->created_time),'dMYH:i:s');			$row[]='<divclass="text-right">Rp'.number_format($rows->grand_total,2,'.',',').'</div>';			if($rows->date_kirim!=NULL){				$bagde_kirim='<divclass="badgebg-purple">Dikirim</div>';			}else{				$bagde_kirim='';			}			if(($rows->sale_status==1&&$rows->payment_method_id=='z')||($rows->sale_status==1&&$rows->date_dp!=NULL)){				$row[]='<divclass="badgebadge-warning">DP</div><divclass="badgebadge-primary">Approved</div>';			}elseif($rows->sale_status==1&&$rows->date_dp==NULL){				$row[]='<divclass="badgebadge-warning">DP</div><divclass="badgebadge-secondary">MenungguApproval</div>';			}elseif($rows->sale_status==2&&$rows->date_lunas==NULL){				$row[]='<divclass="badgebadge-success">Lunas</div><divclass="badgebadge-secondary">MenungguApproval</div>';			}elseif($rows->sale_status==2&&$rows->date_lunas!=NULL){				$row[]='<divclass="badgebadge-success">Lunas</div><divclass="badgebadge-primary">Approved</div>'.$bagde_kirim;			}elseif($rows->sale_status==3&&$rows->due_date==NULL){				$row[]='<divclass="badgebadge-danger">Piutang</div><divclass="badgebadge-secondary">MenungguApproval</div>';			}elseif($rows->sale_status==3&&$rows->due_date!=NULL){				$row[]='<divclass="badgebadge-danger">Piutang</div><divclass="badgebadge-primary">Approved</div>'.$bagde_kirim;			}			$data[]=$row;		endforeach;		$output=array(						"draw"				=>$_POST['draw'],			"recordsTotal"		=>$countTotal,			"recordsFiltered"	=>$this->db->query($query)->num_rows(),						"data"				=>$data					);		echojson_encode($output);			}	//Endoffunctionserver_side_data	functionserver_side_data_detail(){		$query=$this->db->query("SELECTid,										detail										FROMsale_detail										WHEREsale_id=".$this->input->get('id'))->row_array();		$item=$this->db->query("SELECTid,										code,										name										FROMitem										WHEREdept_id=".$this->session->userdata('dept_id')."										ORDERBYnameASC")->result();				$arrayTemplate=array();		if($this->session->userdata('dept_id')==41){			$sale=$this->db->query("SELECTtemplate_id,template_pola.nameAStemplate_name											FROMsale											JOINtemplate_polaONtemplate_pola.id=sale.template_id											WHEREsale.id=".$this->input->get('id'))->row_array();			$arrayTemplate['t'.$sale['template_id']]=$sale['template_name'];		}else{			$template_item=$this->db->query("SELECTid,												CONCAT(brand,'',tipe)AS'template_name',												detail												FROMtemplate_item												WHEREdept_id=".$this->session->userdata('dept_id'))->result();			foreach($template_itemas$row){				$arrayTemplate['t'.$row->id]=$row->template_name;			}		}		$detail=json_decode($query['detail'],TRUE);		$x=array();		for($i=0;$i<count($detail);$i++){			foreach($itemas$row):				if($row->id==$detail[$i]['item_id']){					$key_t='t'.$detail[$i]['template_id'];					if(isset($arrayTemplate[$key_t])){						$template_name=$arrayTemplate[$key_t];												if(isset($detail[$i]['template_qty'])){							$template_qty=$detail[$i]['template_qty'];						}else{							$template_qty="";						}						if(isset($detail[$i]['template_price'])){							$template_price=$detail[$i]['template_price'];						}else{							$template_price="";						}					}else{						$template_name='Peritem';						$template_qty="";						$template_price="";					}					$x[]=array(									'template_id'	=>$detail[$i]['template_id'],									'template_name'=>$template_name,									'template_qty'	=>$template_qty,									'template_price'=>$template_price,									//'template_name'=>$detail[$i]['template_name'],									//'template_qty'	=>$detail[$i]['template_qty'],									//'template_price'=>$detail[$i]['template_price'],									'code'			=>$row->code,									'name'			=>$row->name,									'id'			=>$row->id,									'qty'			=>$detail[$i]['qty'],									'price'			=>$detail[$i]['price'],									'total'			=>$detail[$i]['price']*$detail[$i]['qty'],									'sale_price_id'	=>$detail[$i]['sale_price_id']								);				}			endforeach;		}		echojson_encode($x);	}	//Endoffunctionserver_side_data_detail	publicfunctionload_modal_item(){		$attr=array(						'item'=>$this->db->query("SELECTitem.id,														item.nameAS'item_name',														item.code														FROMitem														WHEREdept_id=".$this->session->userdata('dept_id')."														ORDERBYnameASC")->result()					);		$this->load->view('transaction/sales/modal-load-item',$attr);			}	//Endoffunctionload_modal_item	publicfunctionload_modal_template(){		$attr=array(						'template'=>$this->db->query("SELECTid,															brand,															tipe,															CONCAT(brand,'',tipe)AS'template_name',															detail															FROMtemplate_item															WHEREdept_id=".$this->session->userdata('dept_id')."															AND(detailISNOTNULL															ORdetail!='')															ORDERBYbrand,tipeASC")->result_array(),						'item'		=>$this->db->query("SELECTid,																code,																name																FROMitem																WHEREdept_id=".$this->session->userdata('dept_id')."																ORDERBYnameASC")->result()					);		$this->load->view('transaction/sales/modal-load-template',$attr);			}	//Endoffunctionload_modal_template	publicfunctionload_modal_template_pola(){		$attr=array(						'template'=>$this->db->query("SELECTid,name,price,qty															FROMtemplate_pola															WHEREis_active=1															ORDERBYnameASC")->result()		);		$this->load->view('transaction/sales/modal-load-template-pola',$attr);	}	//Endoffunctionload_modal_template_pola	publicfunctioninsert_item(){		$param_selected=$this->input->post('param_selected');		$code=str_replace('','',$this->input->post('code'));		//Ecer		if($param_selected==1){			$query=$this->db->query("SELECTid,										name,										code										FROMitem										WHEREdept_id=".$this->session->userdata('dept_id')."										ANDcode='".$code."'");			if($query->num_rows()==0){				$output=array(								'response'	=>'error-null'							);			}else{				$result=$query->row_array();				$sale_price=$this->db->query("SELECTid,JSON_EXTRACT(detail,'$.i".$result['id']."')AS'price'													FROMsale_price													WHEREdept_id=".$this->session->userdata('dept_id')."													ORDERBYidDESC													LIMIT1");				if($sale_price->num_rows()>0){					$sale_price=$sale_price->row_array();					if($sale_price['price']==NULL){						$output=array(									'response'	=>'price-null'								);					}else{						$output=array(										'response'	=>'success',										'id'		=>$result['id'],										'code'		=>$result['code'],										'name'		=>$result['name'],										'qty'		=>1,										'price'	=>$sale_price['price'],										'total'		=>$sale_price['price'],										'template_id'	=>0,										'sale_price_id'=>$sale_price['id']									);					}				}else{					$output=array(									'response'	=>'price-null'								);				}			}		//Paket		}else{			if(empty($this->session->userdata('template_id'))){				$output=array(								'response'=>'template-null'				);			}else{				$query=$this->db->query("SELECTid,												name,												code												FROMitem												WHEREdept_id=".$this->session->userdata('dept_id')."												ANDcode='".$code."'");				if($query->num_rows()==0){					$output=array(									'response'	=>'error-null'								);				}else{					$result=$query->row_array();					$template_id	=$this->session->userdata('template_id');					$template_price=$this->session->userdata('template_price');					$template_qty	=$this->session->userdata('template_qty');					$per_pcs		=$template_price/$template_qty;					$output=array(									'response'	=>'success',									'id'		=>$result['id'],									'code'		=>$result['code'],									'name'		=>$result['name'],									'qty'		=>1,									'price'	=>$per_pcs,									'total'		=>$per_pcs,									'template_id'	=>$template_id,									'template_price'	=>$per_pcs,									'template_qty'=>$template_qty,									'sale_price_id'=>0								);				}			}		}		echojson_encode($output);	}	//Endoffunctioninsert_item	publicfunctioninsert_template($id,$qty){		$result=$this->db->query("SELECTid,										CONCAT('Paket',brand,'-',tipe)AS'name',										detail										FROMtemplate_item										WHEREid=".$id)->row_array();		$item=$this->db->query("SELECTid,										name,										code										FROMitem										WHEREdept_id=".$this->session->userdata('dept_id')."										ORDERBYnameASC")->result();		$sale_price=$this->db->query("SELECTid,detail											FROMsale_price											WHEREdept_id=".$this->session->userdata('dept_id')."											ORDERBYidDESC											LIMIT1")->result_array();		$y=json_decode($sale_price[0]['detail'],TRUE);		$detail=json_decode($result['detail'],TRUE);		$x=array();		$templatePrice=0;		foreach($detailas$key=>$i){			if(isset($y[$key])){				$templatePrice+=$y[$key]*$i;			}		}		foreach($itemas$row):			$key='i'.$row->id;			if(isset($detail[$key])){				if(isset($y[$key])){					$price=$y[$key];					$x[]=array(							'id'			=>$row->id,							'template_name'	=>$result['name'],							'template_id'	=>$result['id'],							'template_qty'	=>$qty,							'template_price'=>$templatePrice,							'name'			=>$row->name,							'code'			=>$row->code,							'qty'			=>$detail[$key]*$qty,							'price'			=>$price,							'total'			=>$detail[$key]*$price*$qty,							'sale_price_id'	=>$sale_price[0]['id']						);				}else{					$x=array(								'response'=>'price-null',								'name'=>$row->name							);				}			}		endforeach;		echojson_encode($x);	}	//Endoffunctioninsert_template	publicfunctionsave_sales(){		//Permission		$this->session_lib->check_permission('p_sale_add');		if(!$this->input->post('item_id')){			echo'error';		}else{			$customer_ref=$this->input->post('customer_ref');			if(!$this->input->post('payment_method_id')){				$payment_method_id=0;			}else{				$payment_method_id=$this->input->post('payment_method_id');			}			if($customer_ref=='auto'){				$result=$this->db->query("SELECTcustomer_ref												FROMsale												WHEREdept_id=".$this->session->userdata('dept_id')."												ORDERBYidDESC												LIMIT1")->row_array();				if($result==null){					$customer_ref	=1;					$customer_id	=0;				}else{					$customer_ref	=intval($result['customer_ref'])+1;					$customer_id	=0;				}			}else{				$customer=$this->db->query("SELECTid													FROMcustomer													WHEREdept_id=".$this->session->userdata('dept_id')."													ANDname='".$customer_ref."'")->row_array();				if($customer==null){					$data_customer=array(											'name'			=>$customer_ref,											'dept_id'		=>$this->session->userdata('dept_id'),											'created_time'	=>date('Y-m-dH:i:s'),											'updated_time'	=>date('Y-m-dH:i:s'),											'creator'		=>$this->session->userdata('user_id'),											'updated_by'	=>$this->session->userdata('user_id')										);					$this->db->insert('customer',$data_customer);					$customer_id=$this->db->insert_id();				}else{					$customer_id=$customer['id'];				}			}			$receipt_number='INV/'.strtotime(date('Ymd')).'/'.romanic_number(date('y')).romanic_number(date('y')).'/'.romanic_number(date('m')).substr(strtotime(date('Y-m-dH:i:s')),-8);			$pay_status	=$this->input->post('pay_status');			$subtotal		=$this->input->post('subtotal');			$ppn			=$this->input->post('ppn');			$d_cost			=floatval(str_replace(",","",str_replace(".00","",$this->input->post('d_cost'))));			$pay			=floatval(str_replace(",","",str_replace(".00","",$this->input->post('pay'))));			$nominal_dp=0;			$date_piutang=null;			$date_lunas=null;			$date_dp=null;			if($pay_status==2&&$payment_method_id=='z'){				$date_lunas=date('Y-m-dH:i:s');			}			if($pay_status==1&&$payment_method_id=='z'){				$date_dp=date('Y-m-dH:i:s');				$nominal_dp=$pay;			}			if($pay_status==3){				$date_piutang=date('Y-m-dH:i:s');			}			$data=array(							'dept_id'			=>$this->session->userdata('dept_id'),							'warehouse_id'=>$this->session->userdata('p_warehouse_id'),							'customer_ref'		=>$customer_ref,							'customer_id'		=>$customer_id,							'receipt_number'	=>$receipt_number,							'sale_status'		=>$pay_status,							'total_price'		=>$subtotal,							'ppn'				=>$ppn,							'd_cost'			=>$d_cost,							'nominal_bayar'	=>$pay,							'nominal_dp'		=>$nominal_dp,							'payment_method_id'=>$payment_method_id,							'date_piutang'		=>$date_piutang,							'date_lunas'		=>$date_lunas,							'date_dp'			=>$date_dp,							'created_time'		=>date('Y-m-dH:i:s'),							'updated_time'		=>date('Y-m-dH:i:s'),							'creator'			=>$this->session->userdata('user_id'),							'updated_by'		=>$this->session->userdata('user_id')						);			if($this->session->userdata('dept_id')==41){				$data['template_id']=$this->session->userdata('template_id');			}			$item_id	=$this->input->post('item_id');			$item_qty	=$this->input->post('item_qty');			$item_price=$this->input->post('item_price');			$template_id	=$this->input->post('template_id');			$template_qty	=$this->input->post('template_qty');			$template_price	=$this->input->post('template_price');			$sale_price_id=$this->input->post('sale_price_id');			$this->db->trans_start();			$this->db->insert('sale',$data);			$insert_id=$this->db->insert_id();			for($i=0;$i<count($item_id);$i++){				$detail[]=array(								'template_id'	=>$template_id[$i],								'template_qty'	=>$template_qty[$i],								'template_price'=>$template_price[$i],								'item_id'		=>$item_id[$i],								'qty'			=>$item_qty[$i],								'price'			=>$item_price[$i],								'sale_price_id'	=>$sale_price_id[$i]							);			}			$data_detail=array(									'sale_id'	=>$insert_id,									'detail'	=>json_encode($detail)								);						$this->db->insert('sale_detail',$data_detail);			$record[date('Y-m-dH:i:s')]=array(												'status_menu'	=>0,												'act'			=>1,												'user_id'		=>$this->session->userdata('user_id')											);			$data_record=array(									'sale_id'	=>$insert_id,									'detail'	=>json_encode($record)								);			$this->db->insert('sale_record',$data_record);						//Log			if($this->db->trans_status()===false){				$this->db->trans_rollback();				echo'error';			}else{				$this->db->trans_commit();				echo'success';			}		}	}	//Endoffunctionsave_sales	publicfunctionedit_sales($id){				//Permission		$this->session_lib->check_permission('p_sale_edit');		if(!$this->input->post('item_id')){			echo'error';		}else{			$customer_ref=$this->input->post('customer_ref');			if(!$this->input->post('payment_method_id')){				$payment_method_id=0;			}else{				$payment_method_id=$this->input->post('payment_method_id');			}			if($customer_ref=='auto'){				$result=$this->db->query("SELECTcustomer_ref												FROMsale												WHEREdept_id=".$this->session->userdata('dept_id')."												ORDERBYidDESC												LIMIT1")->row_array();				if($result==null){					$customer_ref	=1;					$customer_id	=0;				}else{					$customer_ref	=intval($result['customer_ref'])+1;					$customer_id	=0;				}			}else{				$customer=$this->db->query("SELECTid													FROMcustomer													WHEREdept_id=".$this->session->userdata('dept_id')."													ANDname='".$customer_ref."'")->row_array();				if($customer==null){					$data_customer=array(											'name'			=>$customer_ref,											'dept_id'		=>$this->session->userdata('dept_id'),											'created_time'	=>date('Y-m-dH:i:s'),											'updated_time'	=>date('Y-m-dH:i:s'),											'creator'		=>$this->session->userdata('user_id'),											'updated_by'	=>$this->session->userdata('user_id')										);					$this->db->insert('customer',$data_customer);					$customer_id=$this->db->insert_id();				}else{					$customer_id=$customer['id'];				}			}			$pay_status	=$this->input->post('pay_status');			$subtotal		=$this->input->post('subtotal');			$ppn			=$this->input->post('ppn');			$d_cost			=floatval(str_replace(",","",str_replace(".00","",$this->input->post('d_cost'))));			$pay			=floatval(str_replace(",","",str_replace(".00","",$this->input->post('pay'))));			$nominal_dp=0;			$date_piutang=null;			$date_lunas=null;			$date_dp=null;			if($pay_status==2&&$payment_method_id=='z'){				$date_lunas=date('Y-m-dH:i:s');			}			if($pay_status==1&&$payment_method_id=='z'){				$date_dp=date('Y-m-dH:i:s');				$nominal_dp=$pay;			}			if($pay_status==3){				$date_piutang=date('Y-m-dH:i:s');			}			$data=array(							'customer_ref'		=>$customer_ref,							'customer_id'		=>$customer_id,							'sale_status'		=>$pay_status,							'total_price'		=>$subtotal,							'ppn'				=>$ppn,							'd_cost'			=>$d_cost,							'nominal_bayar'	=>$pay,							'nominal_dp'		=>$nominal_dp,							'payment_method_id'=>$payment_method_id,							'date_piutang'		=>$date_piutang,							'date_lunas'		=>$date_lunas,							'date_dp'			=>$date_dp,							'updated_time'		=>date('Y-m-dH:i:s'),							'updated_by'		=>$this->session->userdata('user_id')						);			$item_id	=$this->input->post('item_id');			$item_qty	=$this->input->post('item_qty');			$item_price=$this->input->post('item_price');			$template_id	=$this->input->post('template_id');			$template_qty	=$this->input->post('template_qty');			$template_price=$this->input->post('template_price');			$sale_price_id=$this->input->post('sale_price_id');			$this->db->trans_start();			$this->db->where('id',$id);			$this->db->update('sale',$data);			$insert_id=$id;			$this->db->where('sale_id',$insert_id);			$this->db->delete('sale_detail');			for($i=0;$i<count($item_id);$i++){				$detail[]=array(								'template_id'	=>$template_id[$i],								'template_qty'	=>$template_qty[$i],								'template_price'=>$template_price[$i],								'item_id'		=>$item_id[$i],								'qty'			=>$item_qty[$i],								'price'			=>$item_price[$i],								'sale_price_id'	=>$sale_price_id[$i]							);			}			$data_detail=array(									'sale_id'	=>$insert_id,									'detail'	=>json_encode($detail)								);						$this->db->insert('sale_detail',$data_detail);			$this->db->query("UPDATEsale_recordSETdetail=JSON_SET(detail,'$.".date('Y-m-dH:i:s')."',																	JSON_OBJECT('status_menu',0,'act',2,'user_id','".$this->session->userdata('user_id')."'))												WHEREsale_id=".$insert_id);						//Log			if($this->db->trans_status()===false){				$this->db->trans_rollback();				echo'error';			}else{				$this->db->trans_commit();				echo'success';			}		}	}		//Endoffunctionedit_sales	publicfunctionload_display_detail(){		$attr=array(						'closingDate'=>$this->closingDate,						'receipt'=>$this->db->query("SELECTsale.id,															receipt_number,															customer_id,															customer_ref,															IF(sale.customer_id=0,CONCAT('#Customer',sale.customer_ref),customer.name)AS'customer_name',															nominal_bayar,															total_price,															sale_status,															due_date,															DATEDIFF(due_date,NOW())AS'datediff',															d_cost,															ppn,															total_price+ppn+d_costAS'grand_total',															sale_price_ref,															sale.created_time,															sale.creator,															payment_method_id,															date_lunas,															date_dp,															due_date,															date_piutang,															date_kirim,															CASE															WHENsale_status=1THENdate_dp															WHENsale_status=2THENdate_lunas															WHENsale_status=3THENdue_date															ENDAS'date_pay',															CASE															WHENpayment_method_dp_lunasISNOTNULLTHENIF(sale.payment_method_dp_lunas='z','Tunai',IF(sale.payment_method_dp_lunas!=0,CONCAT(dp_lunas.name,'-',dp_lunas.bank_name),NULL))															ELSEIF(sale.payment_method_id='z','Tunai',IF(sale.payment_method_id!=0,CONCAT(payment_method.name,'-',payment_method.bank_name),NULL))															ENDAS'payment_method_name'															FROMsale															LEFTJOINcustomerONcustomer.id=sale.customer_idANDsale.customer_id!=0															LEFTJOINpayment_methodONpayment_method.id=sale.payment_method_idANDsale.payment_method_id!=0															LEFTJOINpayment_methoddp_lunasONdp_lunas.id=sale.payment_method_dp_lunasANDsale.payment_method_dp_lunasISNOTNULL															WHEREsale.id=".$this->input->get('id'))->row_array()					);		$this->load->view('transaction/sales/display-detail',$attr);			}	//Endoffunctionload_display_detail	publicfunctiondelete_sales(){		//Permission		$this->session_lib->check_permission('p_sale_delete');		$this->db->trans_start();		$this->db->where('id',$this->input->post('id'));		$this->db->delete('sale');		if($this->db->trans_status()===false){			$this->db->trans_rollback();			echo'error';		}else{			$this->db->trans_commit();			echo'success';		}			}	//Endoffunctiondelete_sales	/**	*@parampost=>id	*/	publicfunctionselected_template(){		$id=$this->input->post('id');		if($id==0){			$data=array(							'template_id'		=>'0',							'template_name'	=>'Eceran',							'template_price'	=>0,							'template_qty'		=>'-'			);		}else{			$query=$this->db->query("SELECTid,name,price,qty											FROMtemplate_pola											WHEREid=".$id)->row_array();			$data=array(							'template_id'		=>$query['id'],							'template_name'	=>$query['name'],							'template_price'	=>$query['price'],							'template_qty'		=>$query['qty']			);		}				$this->session->set_userdata($data);		echojson_encode($data);	}	//Endoffunctionselected_template	/**	*@parampost=>grandtotal	*/	publicfunctionvalidate_template(){		$grandtotal=$this->input->post('grandtotal');		$sess_grandtotal=$this->session->userdata('template_price');		if($grandtotal==$sess_grandtotal){			echo'matched';		}else{			echo'not-matched';		}	}	//Endoffunctionvalidate_template}/*EndoffileSales.php*//*Location:./application/controllers/Sales.php*/'
ERROR - 2021-05-27 11:15:23 --> Severity: Warning --> count(): Parameter must be an array or an object that implements Countable /home/ansenasa/public_html/polakain/application/controllers/Invoice.php 537
ERROR - 2021-05-27 11:15:23 --> Query error: Column 'vendor_id' cannot be null - Invalid query: INSERT INTO `invoice` (`dept_id`, `invoice_number`, `vendor_id`, `date_invoice`, `total_price`, `disc`, `ppn`, `is_ppn`, `d_cost`, `with_matoa_shipping`, `payment_status`, `created_time`, `updated_time`, `creator`, `updated_by`) VALUES ('41', '', NULL, '2021-05-27 11:15:23', 0, 0, 0, 1, 0, NULL, NULL, '2021-05-27 11:15:23', '2021-05-27 11:15:23', '15', '15')
ERROR - 2021-05-27 11:15:23 --> Severity: Warning --> Cannot modify header information - headers already sent by (output started at /home/ansenasa/public_html/polakain/system/core/Exceptions.php:271) /home/ansenasa/public_html/polakain/system/core/Common.php 570
ERROR - 2021-05-27 11:15:23 --> Severity: Warning --> count(): Parameter must be an array or an object that implements Countable /home/ansenasa/public_html/polakain/application/controllers/Invoice.php 537
ERROR - 2021-05-27 11:15:23 --> Query error: Column 'vendor_id' cannot be null - Invalid query: INSERT INTO `invoice` (`dept_id`, `invoice_number`, `vendor_id`, `date_invoice`, `total_price`, `disc`, `ppn`, `is_ppn`, `d_cost`, `with_matoa_shipping`, `payment_status`, `created_time`, `updated_time`, `creator`, `updated_by`) VALUES ('41', '', NULL, '2021-05-27 11:15:23', 0, 0, 0, 1, 0, NULL, NULL, '2021-05-27 11:15:23', '2021-05-27 11:15:23', '15', '15')
ERROR - 2021-05-27 11:15:23 --> Severity: Warning --> Cannot modify header information - headers already sent by (output started at /home/ansenasa/public_html/polakain/system/core/Exceptions.php:271) /home/ansenasa/public_html/polakain/system/core/Common.php 570
ERROR - 2021-05-27 08:42:09 --> Severity: error --> Exception: syntax error, unexpected ',' /home/ansenasa/public_html/polakain/application/controllers/Acc.php 422
